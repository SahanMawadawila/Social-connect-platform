generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Topic {
  id          String @id @default(cuid())
  slug        String @unique  //name of the topic
  description String
  posts       Post[]

  createdAt DateTime @default(now())  //this is automatically set to the current date and time when a new record is created.it is managed by prisma
  updatedAt DateTime @updatedAt
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String
  userId  String
  topicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade) //indicate the relationship 
  topic    Topic     @relation(fields: [topicId], references: [id]) //topic is the relation to Topic table. this topic, used in sql join statements with prisma
  comments Comment[] //indicate many to many relationship
}

model Comment {
  id       String  @id @default(cuid()) //The cuid() function generates collision-resistant IDs, ensuring uniqueness.
  content  String
  postId   String
  userId   String
  parentId String?  //if have any parent put parent ID. if not put null

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt //this is automatically set to the current date and time when a record is updated. it is managed by prisma

  parent   Comment?  @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  children Comment[] @relation("Comments") //self-referencing relationship. it indicates that a comment can have many children. 
}
